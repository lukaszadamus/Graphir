# FHIR GraphQL Schema. Version 4.6.0

# import * from 'types.graphql'

type ConceptMap2 {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  url: uri  _url: ElementBase
  identifier: [Identifier]
  version: String  _version: ElementBase
  name: String  _name: ElementBase
  title: String  _title: ElementBase
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  date: dateTime  _date: ElementBase
  publisher: String  _publisher: ElementBase
  contact: [ContactDetail]
  description: markdown  _description: ElementBase
  useContext: [UsageContext]
  jurisdiction: [CodeableConcept]
  purpose: markdown  _purpose: ElementBase
  copyright: markdown  _copyright: ElementBase
  sourceUri: uri  _sourceUri: ElementBase
  sourceCanonical: canonical  _sourceCanonical: ElementBase
  targetUri: uri  _targetUri: ElementBase
  targetCanonical: canonical  _targetCanonical: ElementBase
  group: [ConceptMap2Group]
}

type ConceptMap2Group {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  source: canonical  _source: ElementBase
  target: canonical  _target: ElementBase
  element: [ConceptMap2GroupElement]!
  unmapped: ConceptMap2GroupUnmapped
}

type ConceptMap2GroupElement {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  code: code  _code: ElementBase
  display: String  _display: ElementBase
  noMap: Boolean  _noMap: ElementBase
  target: [ConceptMap2GroupElementTarget]
}

type ConceptMap2GroupElementTarget {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  code: code  _code: ElementBase
  display: String  _display: ElementBase
  relationship: code  _relationship: ElementBase
  comment: String  _comment: ElementBase
  dependsOn: [ConceptMap2GroupElementTargetDependsOn]
  product: [ConceptMap2GroupElementTargetDependsOn]
}

type ConceptMap2GroupElementTargetDependsOn {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  property: uri  _property: ElementBase
  valueCode: code  _valueCode: ElementBase
  valueCoding: Coding
  valueString: String  _valueString: ElementBase
  valueInteger: Int  _valueInteger: ElementBase
  valueBoolean: Boolean  _valueBoolean: ElementBase
  valueDateTime: dateTime  _valueDateTime: ElementBase
  valueDecimal: decimal  _valueDecimal: ElementBase
  valueUri: uri  _valueUri: ElementBase
  valueId: ID  _valueId: ElementBase
}

type ConceptMap2GroupUnmapped {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  mode: code  _mode: ElementBase
  code: code  _code: ElementBase
  display: String  _display: ElementBase
  url: canonical  _url: ElementBase
}

input ConceptMap2Input {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBaseInput
  language: code  _language: ElementBaseInput
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  url: uri  _url: ElementBaseInput
  identifier: [IdentifierInput]
  version: String  _version: ElementBaseInput
  name: String  _name: ElementBaseInput
  title: String  _title: ElementBaseInput
  status: code  _status: ElementBaseInput
  experimental: Boolean  _experimental: ElementBaseInput
  date: dateTime  _date: ElementBaseInput
  publisher: String  _publisher: ElementBaseInput
  contact: [ContactDetailInput]
  description: markdown  _description: ElementBaseInput
  useContext: [UsageContextInput]
  jurisdiction: [CodeableConceptInput]
  purpose: markdown  _purpose: ElementBaseInput
  copyright: markdown  _copyright: ElementBaseInput
  sourceUri: uri  _sourceUri: ElementBaseInput
  sourceCanonical: canonical  _sourceCanonical: ElementBaseInput
  targetUri: uri  _targetUri: ElementBaseInput
  targetCanonical: canonical  _targetCanonical: ElementBaseInput
  group: [ConceptMap2GroupInput]
}

input ConceptMap2GroupInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  source: canonical  _source: ElementBaseInput
  target: canonical  _target: ElementBaseInput
  element: [ConceptMap2GroupElementInput]!
  unmapped: ConceptMap2GroupUnmappedInput
}

input ConceptMap2GroupElementInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  code: code  _code: ElementBaseInput
  display: String  _display: ElementBaseInput
  noMap: Boolean  _noMap: ElementBaseInput
  target: [ConceptMap2GroupElementTargetInput]
}

input ConceptMap2GroupElementTargetInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  code: code  _code: ElementBaseInput
  display: String  _display: ElementBaseInput
  relationship: code  _relationship: ElementBaseInput
  comment: String  _comment: ElementBaseInput
  dependsOn: [ConceptMap2GroupElementTargetDependsOnInput]
  product: [ConceptMap2GroupElementTargetDependsOn]
}

input ConceptMap2GroupElementTargetDependsOnInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  property: uri  _property: ElementBaseInput
  valueCode: code  _valueCode: ElementBaseInput
  valueCoding: CodingInput
  valueString: String  _valueString: ElementBaseInput
  valueInteger: Int  _valueInteger: ElementBaseInput
  valueBoolean: Boolean  _valueBoolean: ElementBaseInput
  valueDateTime: dateTime  _valueDateTime: ElementBaseInput
  valueDecimal: decimal  _valueDecimal: ElementBaseInput
  valueUri: uri  _valueUri: ElementBaseInput
  valueId: ID  _valueId: ElementBaseInput
}

input ConceptMap2GroupUnmappedInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  mode: code  _mode: ElementBaseInput
  code: code  _code: ElementBaseInput
  display: String  _display: ElementBaseInput
  url: canonical  _url: ElementBaseInput
}

type ConceptMap2ReadType {
  ConceptMap2(id: ID!): ConceptMap2
}

type ConceptMap2ListType {
  ConceptMap2List(_filter: String
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    dependson: [uri]
    description: [String]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    other: [reference]
    product: [uri]
    publisher: [String]
    source: [reference]
    source_code: [token]
    source_system: [uri]
    source_uri: [reference]
    status: [token]
    target: [reference]
    target_code: [token]
    target_system: [uri]
    target_uri: [reference]
    title: [String]
    url: [uri]
    version: [token]
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    description: [String]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    publisher: [String]
    status: [token]
    title: [String]
    url: [uri]
    version: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [ConceptMap2]
}

type ConceptMap2ConnectionType {
  ConceptMap2Conection(_filter: String
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    dependson: [uri]
    description: [String]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    other: [reference]
    product: [uri]
    publisher: [String]
    source: [reference]
    source_code: [token]
    source_system: [uri]
    source_uri: [reference]
    status: [token]
    target: [reference]
    target_code: [token]
    target_system: [uri]
    target_uri: [reference]
    title: [String]
    url: [uri]
    version: [token]
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    description: [String]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    publisher: [String]
    status: [token]
    title: [String]
    url: [uri]
    version: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): ConceptMap2Connection
}

type ConceptMap2Connection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [ConceptMap2Edge]
}

type ConceptMap2Edge {
  mode: String
  score: Float
  resource: ConceptMap2
}

type ConceptMap2CreateType {
  ConceptMap2Create(resource: ConceptMap2Input): ConceptMap2Creation
}

type ConceptMap2Creation {
  location: String
  resource: ConceptMap2
  information: OperationOutcome
}

type ConceptMap2UpdateType {
  ConceptMap2Update(id: ID, resource: ConceptMap2Input): ConceptMap2Update
}

type ConceptMap2Update {
  resource: ConceptMap2
  information: OperationOutcome
}

type ConceptMap2DeleteType {
  ConceptMap2Delete(id: ID): ConceptMap2Delete
}

type ConceptMap2Delete {
  information: OperationOutcome
}

