# FHIR GraphQL Schema. Version 4.6.0

# import * from 'types.graphql'

type ConceptMap {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  url: uri  _url: ElementBase
  identifier: [Identifier]
  version: String  _version: ElementBase
  name: String  _name: ElementBase
  title: String  _title: ElementBase
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  date: dateTime  _date: ElementBase
  publisher: String  _publisher: ElementBase
  contact: [ContactDetail]
  description: markdown  _description: ElementBase
  useContext: [UsageContext]
  jurisdiction: [CodeableConcept]
  purpose: markdown  _purpose: ElementBase
  copyright: markdown  _copyright: ElementBase
  sourceUri: uri  _sourceUri: ElementBase
  sourceCanonical: canonical  _sourceCanonical: ElementBase
  targetUri: uri  _targetUri: ElementBase
  targetCanonical: canonical  _targetCanonical: ElementBase
  group: [ConceptMapGroup]
}

type ConceptMapGroup {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  source: canonical  _source: ElementBase
  target: canonical  _target: ElementBase
  element: [ConceptMapGroupElement]!
  unmapped: ConceptMapGroupUnmapped
}

type ConceptMapGroupElement {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  code: code  _code: ElementBase
  display: String  _display: ElementBase
  noMap: Boolean  _noMap: ElementBase
  target: [ConceptMapGroupElementTarget]
}

type ConceptMapGroupElementTarget {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  code: code  _code: ElementBase
  display: String  _display: ElementBase
  relationship: code  _relationship: ElementBase
  comment: String  _comment: ElementBase
  dependsOn: [ConceptMapGroupElementTargetDependsOn]
  product: [ConceptMapGroupElementTargetDependsOn]
}

type ConceptMapGroupElementTargetDependsOn {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  property: uri  _property: ElementBase
  system: canonical  _system: ElementBase
  value: String  _value: ElementBase
  display: String  _display: ElementBase
}

type ConceptMapGroupUnmapped {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  mode: code  _mode: ElementBase
  code: code  _code: ElementBase
  display: String  _display: ElementBase
  url: canonical  _url: ElementBase
}

input ConceptMapInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBaseInput
  language: code  _language: ElementBaseInput
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  url: uri  _url: ElementBaseInput
  identifier: [IdentifierInput]
  version: String  _version: ElementBaseInput
  name: String  _name: ElementBaseInput
  title: String  _title: ElementBaseInput
  status: code  _status: ElementBaseInput
  experimental: Boolean  _experimental: ElementBaseInput
  date: dateTime  _date: ElementBaseInput
  publisher: String  _publisher: ElementBaseInput
  contact: [ContactDetailInput]
  description: markdown  _description: ElementBaseInput
  useContext: [UsageContextInput]
  jurisdiction: [CodeableConceptInput]
  purpose: markdown  _purpose: ElementBaseInput
  copyright: markdown  _copyright: ElementBaseInput
  sourceUri: uri  _sourceUri: ElementBaseInput
  sourceCanonical: canonical  _sourceCanonical: ElementBaseInput
  targetUri: uri  _targetUri: ElementBaseInput
  targetCanonical: canonical  _targetCanonical: ElementBaseInput
  group: [ConceptMapGroupInput]
}

input ConceptMapGroupInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  source: canonical  _source: ElementBaseInput
  target: canonical  _target: ElementBaseInput
  element: [ConceptMapGroupElementInput]!
  unmapped: ConceptMapGroupUnmappedInput
}

input ConceptMapGroupElementInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  code: code  _code: ElementBaseInput
  display: String  _display: ElementBaseInput
  noMap: Boolean  _noMap: ElementBaseInput
  target: [ConceptMapGroupElementTargetInput]
}

input ConceptMapGroupElementTargetInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  code: code  _code: ElementBaseInput
  display: String  _display: ElementBaseInput
  relationship: code  _relationship: ElementBaseInput
  comment: String  _comment: ElementBaseInput
  dependsOn: [ConceptMapGroupElementTargetDependsOnInput]
  product: [ConceptMapGroupElementTargetDependsOn]
}

input ConceptMapGroupElementTargetDependsOnInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  property: uri  _property: ElementBaseInput
  system: canonical  _system: ElementBaseInput
  value: String  _value: ElementBaseInput
  display: String  _display: ElementBaseInput
}

input ConceptMapGroupUnmappedInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  mode: code  _mode: ElementBaseInput
  code: code  _code: ElementBaseInput
  display: String  _display: ElementBaseInput
  url: canonical  _url: ElementBaseInput
}

type ConceptMapReadType {
  ConceptMap(id: ID!): ConceptMap
}

type ConceptMapListType {
  ConceptMapList(_filter: String
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    dependson: [uri]
    description: [String]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    other: [reference]
    product: [uri]
    publisher: [String]
    source: [reference]
    source_code: [token]
    source_system: [uri]
    source_uri: [reference]
    status: [token]
    target: [reference]
    target_code: [token]
    target_system: [uri]
    target_uri: [reference]
    title: [String]
    url: [uri]
    version: [token]
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    description: [String]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    publisher: [String]
    status: [token]
    title: [String]
    url: [uri]
    version: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [ConceptMap]
}

type ConceptMapConnectionType {
  ConceptMapConection(_filter: String
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    dependson: [uri]
    description: [String]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    other: [reference]
    product: [uri]
    publisher: [String]
    source: [reference]
    source_code: [token]
    source_system: [uri]
    source_uri: [reference]
    status: [token]
    target: [reference]
    target_code: [token]
    target_system: [uri]
    target_uri: [reference]
    title: [String]
    url: [uri]
    version: [token]
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    description: [String]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    publisher: [String]
    status: [token]
    title: [String]
    url: [uri]
    version: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): ConceptMapConnection
}

type ConceptMapConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [ConceptMapEdge]
}

type ConceptMapEdge {
  mode: String
  score: Float
  resource: ConceptMap
}

type ConceptMapCreateType {
  ConceptMapCreate(resource: ConceptMapInput): ConceptMapCreation
}

type ConceptMapCreation {
  location: String
  resource: ConceptMap
  information: OperationOutcome
}

type ConceptMapUpdateType {
  ConceptMapUpdate(id: ID, resource: ConceptMapInput): ConceptMapUpdate
}

type ConceptMapUpdate {
  resource: ConceptMap
  information: OperationOutcome
}

type ConceptMapDeleteType {
  ConceptMapDelete(id: ID): ConceptMapDelete
}

type ConceptMapDelete {
  information: OperationOutcome
}

