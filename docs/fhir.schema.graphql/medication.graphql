# FHIR GraphQL Schema. Version 4.6.0

# import * from 'types.graphql'

type Medication {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  code: CodeableConcept
  status: code  _status: ElementBase
  marketingAuthorizationHolder: Reference
  doseForm: CodeableConcept
  totalVolume: Ratio
  ingredient: [MedicationIngredient]
  batch: MedicationBatch
}

type MedicationIngredient {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  item: CodeableReference!
  isActive: Boolean  _isActive: ElementBase
  strengthRatio: Ratio
  strengthCodeableConcept: CodeableConcept
  strengthQuantity: Quantity
}

type MedicationBatch {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  lotNumber: String  _lotNumber: ElementBase
  expirationDate: dateTime  _expirationDate: ElementBase
}

input MedicationInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBaseInput
  language: code  _language: ElementBaseInput
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  code: CodeableConceptInput
  status: code  _status: ElementBaseInput
  marketingAuthorizationHolder: ReferenceInput
  doseForm: CodeableConceptInput
  totalVolume: RatioInput
  ingredient: [MedicationIngredientInput]
  batch: MedicationBatchInput
}

input MedicationIngredientInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  item: CodeableReferenceInput!
  isActive: Boolean  _isActive: ElementBaseInput
  strengthRatio: RatioInput
  strengthCodeableConcept: CodeableConceptInput
  strengthQuantity: QuantityInput
}

input MedicationBatchInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  lotNumber: String  _lotNumber: ElementBaseInput
  expirationDate: dateTime  _expirationDate: ElementBaseInput
}

type MedicationReadType {
  Medication(id: ID!): Medication
}

type MedicationListType {
  MedicationList(_filter: String
    code: [token]
    expiration_date: [date]
    form: [token]
    identifier: [token]
    ingredient: [reference]
    ingredient_code: [token]
    lot_number: [token]
    marketingauthorizationholder: [reference]
    status: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [Medication]
}

type MedicationConnectionType {
  MedicationConection(_filter: String
    code: [token]
    expiration_date: [date]
    form: [token]
    identifier: [token]
    ingredient: [reference]
    ingredient_code: [token]
    lot_number: [token]
    marketingauthorizationholder: [reference]
    status: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _list: [special]
    _profile: [reference]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): MedicationConnection
}

type MedicationConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [MedicationEdge]
}

type MedicationEdge {
  mode: String
  score: Float
  resource: Medication
}

type MedicationCreateType {
  MedicationCreate(resource: MedicationInput): MedicationCreation
}

type MedicationCreation {
  location: String
  resource: Medication
  information: OperationOutcome
}

type MedicationUpdateType {
  MedicationUpdate(id: ID, resource: MedicationInput): MedicationUpdate
}

type MedicationUpdate {
  resource: Medication
  information: OperationOutcome
}

type MedicationDeleteType {
  MedicationDelete(id: ID): MedicationDelete
}

type MedicationDelete {
  information: OperationOutcome
}

